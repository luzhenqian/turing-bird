generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Category {
  id        Int       @id @default(autoincrement())
  recordId  String    @unique @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name      String    @unique @db.VarChar
  createdAt DateTime  @default(now()) @db.Timestamp(6)
  updatedAt DateTime  @updatedAt
  deletedAt DateTime? @db.Timestamp(6)

  @@index([name])
}

model Collect {
  id        Int       @id @default(autoincrement())
  recordId  String    @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId    String    @db.Uuid
  postId    String    @db.Uuid
  createdAt DateTime  @default(now()) @db.Timestamp(6)
  updatedAt DateTime  @updatedAt
  deletedAt DateTime? @db.Timestamp(6)
}

model Comment {
  id        Int       @id @default(autoincrement())
  recordId  String    @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId    String    @db.Uuid
  postId    String    @db.Uuid
  content   String
  parentId  String?   @db.Uuid
  createdAt DateTime  @default(now()) @db.Timestamp(6)
  updatedAt DateTime  @updatedAt
  deletedAt DateTime? @db.Timestamp(6)
}

model ContentAnalysis {
  id            Int       @id @default(autoincrement())
  recordId      String    @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId        String    @db.Uuid
  postId        String    @db.Uuid
  wordCount     Int?
  creationPoint Int?
  showCount     Int?
  viewCount     Int?
  likeCount     Int?
  commentCount  Int?
  collectCount  Int?
  createdAt     DateTime  @default(now()) @db.Timestamp(6)
  updatedAt     DateTime  @updatedAt
  deletedAt     DateTime? @db.Timestamp(6)
}

model Fllow {
  id         Int       @id @default(autoincrement())
  recordId   String    @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  followerId String    @db.Uuid
  followedId String    @db.Uuid
  createdAt  DateTime  @default(now()) @db.Timestamp(6)
  updatedAt  DateTime  @updatedAt
  deletedAt  DateTime? @db.Timestamp(6)
}

model FllowAnalysis {
  id          Int       @id @default(autoincrement())
  recordId    String    @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId      String    @db.Uuid
  activeCount Int?
  newCount    Int?
  cancelCount Int?
  createdAt   DateTime  @default(now()) @db.Timestamp(6)
  updatedAt   DateTime  @updatedAt
  deletedAt   DateTime? @db.Timestamp(6)
}

model Like {
  id          Int       @id @default(autoincrement())
  recordId    String    @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId      String    @db.Uuid
  postId      String    @db.Uuid
  isEffective Boolean
  createdAt   DateTime  @default(now()) @db.Timestamp(6)
  updatedAt   DateTime  @updatedAt
  deletedAt   DateTime? @db.Timestamp(6)
}

model Post {
  id        Int       @id @default(autoincrement())
  recordId  String    @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  title     String    @unique @db.VarChar
  cover     String?   @db.VarChar
  content   String
  isDraft   Boolean
  userId    String    @db.Uuid
  createdAt DateTime  @default(now()) @db.Timestamp(6)
  updatedAt DateTime  @updatedAt
  deletedAt DateTime? @db.Timestamp(6)

  @@index([title])
}

model PostCategory {
  id         Int       @id @default(autoincrement())
  recordId   String    @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  postId     String    @db.Uuid
  categoryId String    @db.Uuid
  createdAt  DateTime  @default(now()) @db.Timestamp(6)
  updatedAt  DateTime  @updatedAt
  deletedAt  DateTime? @db.Timestamp(6)
}

model PostTag {
  id        Int       @id @default(autoincrement())
  recordId  String    @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  postId    String    @db.Uuid
  tagId     String    @db.Uuid
  createdAt DateTime  @default(now()) @db.Timestamp(6)
  updatedAt DateTime  @updatedAt
  deletedAt DateTime? @db.Timestamp(6)
}

model Recommend {
  id        Int       @id @default(autoincrement())
  recordId  String    @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  postId    String    @db.Uuid
  createdAt DateTime  @default(now()) @db.Timestamp(6)
  updatedAt DateTime  @updatedAt
  deletedAt DateTime? @db.Timestamp(6)
}

model Tag {
  id        Int       @id @default(autoincrement())
  recordId  String    @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name      String    @unique @db.VarChar
  createdAt DateTime  @default(now()) @db.Timestamp(6)
  updatedAt DateTime  @updatedAt
  deletedAt DateTime? @db.Timestamp(6)

  @@index([name])
}

model Top {
  id        Int       @id @default(autoincrement())
  recordId  String    @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  postId    String    @db.Uuid
  createdAt DateTime  @default(now()) @db.Timestamp(6)
  updatedAt DateTime  @updatedAt
  deletedAt DateTime? @db.Timestamp(6)
}

model View {
  id        Int       @id @default(autoincrement())
  recordId  String    @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  postId    String    @db.Uuid
  show      Int?
  read      Int?
  createdAt DateTime  @default(now()) @db.Timestamp(6)
  updatedAt DateTime  @updatedAt
  deletedAt DateTime? @db.Timestamp(6)
}

model User {
  id            String    @id @default(cuid())
  recordId      String    @unique @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name          String    @unique @db.VarChar
  profile       String?   @db.VarChar
  email         String?   @unique @db.VarChar
  image         String?   @db.VarChar
  phone         String?   @unique @db.VarChar
  birthday      DateTime? @db.Timestamp(6)
  gender        Int?
  address       String?   @db.VarChar
  createdAt     DateTime  @default(now()) @db.Timestamp(6)
  updatedAt     DateTime  @updatedAt
  deletedAt     DateTime? @db.Timestamp(6)
  role          Int       @default(0)
  emailVerified DateTime?
  phoneVerified DateTime?
  accounts      Account[]
  sessions      Session[]

  @@index([name])
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id])

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user User @relation(fields: [userId], references: [id])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
